// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id          String   @id @default(uuid())
  userId      String   @map("user_id")
  createdDate DateTime @default(now()) @map("created_date")
  token       String

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id           String  @id @default(uuid())
  name         String
  email        String  @unique
  passwordHash String  @map("password_hash")
  avatarUrl    String? @map("avatar_url")
  bannerUrl    String? @map("banner_url")
  role         String

  Post        Post[]
  Comment     Comment[]
  Session     Session[]
  CommentLike CommentLike[]

  @@map("users")
}

model Post {
  id          String   @id @default(uuid())
  content     String
  publishedAt DateTime @default(now()) @map("published_at")
  authorId    String   @map("author_id")

  author  User      @relation(fields: [authorId], references: [id])
  Comment Comment[]

  @@map("posts")
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  publishedAt DateTime @default(now()) @map("published_at")
  authorId    String   @map("author_id")
  postId      String   @map("post_id")

  author      User          @relation(fields: [authorId], references: [id])
  post        Post          @relation(fields: [postId], references: [id])
  CommentLike CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        String @id @default(uuid())
  userId    String @map("user_id")
  commentId String @map("comment_id")

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@map("comment_likes")
}
